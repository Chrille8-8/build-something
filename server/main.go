// main.go
// partly generated by chat GPT

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"path/filepath"
	"strconv"

	"github.com/gin-gonic/gin"
)

const encryptionServerPort = "5001"
const databasePort = "5002"
const thisServerPort = "5000"

// Service names for services in Kubernetes config, The URL is for when running on localhost
const URL = "http://127.0.0.1" // When running without kubernets
const encryptServiceName = "encryption-service"
const databaseServiceName = "database-service"

type TextKeyStruct struct {
	Key  int    `json:"key"`
	Text string `json:"text"`
}

// Send results to DB
func sendToDB(data TextKeyStruct) int {
	var success = 1

	// Marshal the payload to JSON
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		fmt.Println("Could not marshall data")
		log.Fatal(err)
	}

	// Create the request to db (When running on localhost)
	//requestURL := fmt.Sprintf("%s:%s/add", URL, databasePort)
	// When running with kubernetes
	requestURL := fmt.Sprintf("http://%s:%s/add", databaseServiceName, databasePort)

	res, err := http.Post(requestURL, "application/json", bytes.NewBuffer(payloadBytes))
	if err != nil {
		fmt.Printf("client: error making http request to encryption server: %s\n", err)
		success = 0
	}
	defer res.Body.Close()

	return success
}

// Show the index.html
func showInputForm(c *gin.Context) {
	filePath := filepath.Join("html", "index.html")
	c.File(filePath)
}

// Takes the input from user and sends it to encryption server and then displays it
func processData(c *gin.Context) {

	//Get key from the form
	key, err := strconv.Atoi(c.PostForm("key"))
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	text := c.PostForm("text")
	// payload struct
	payload := TextKeyStruct{
		Key:  key,  // Encryption key
		Text: text, // Text to be encrypted
	}

	// Marshal the payload to JSON
	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		fmt.Println("Error marshaling JSON:", err)
		return
	}
	//--------------------- Send request to encryption server --------------------

	// Create the request (when running with kubernets)
	requestURL := fmt.Sprintf("http://%s:%s/encrypt", encryptServiceName, encryptionServerPort)

	// When running without kubernetes (localhost)
	//requestURL := fmt.Sprintf("%s:%s/encrypt", URL, encryptionServerPort)

	fmt.Println("requstURL: ", requestURL)
	res, err := http.Post(requestURL, "application/json", bytes.NewBuffer(payloadBytes))
	if err != nil {
		fmt.Printf("client: error making http request to encryption server: %s\n", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"Error:": " Something went wrong when sending request to encryption server",
			"error":  err,
		})
		return
	}
	defer res.Body.Close()

	var encryptedStruct TextKeyStruct // Struct to hold key and string
	err = json.NewDecoder(res.Body).Decode(&encryptedStruct)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Send results and save it in DB
	success := 0
	success = sendToDB(encryptedStruct)
	if success == 1 {
		fmt.Println("DB add success!")
		// Respond with the encrypted text and key
		c.JSON(http.StatusOK, gin.H{
			"Key":            encryptedStruct.Key,
			"Encrypted Text": encryptedStruct.Text,
		})
	} else {
		fmt.Println("DB fail!")
		c.JSON(http.StatusOK, gin.H{
			"Error":          "Failed to save results in database",
			"Key":            encryptedStruct.Key,
			"Encrypted Text": encryptedStruct.Text,
		})
	}
}

func getAllFromDB(c *gin.Context) {

	// ------------- Create the request ----------------
	// When running on localhost
	//requestURL := fmt.Sprintf("%s:%s/getall", URL, databasePort)
	// When running with kubernetes
	requestURL := fmt.Sprintf("http://%s:%s/getall", databaseServiceName, databasePort)

	res, err := http.Get(requestURL)
	if err != nil {
		fmt.Printf("client: error making http request to DB server: %s\n", err)
		c.JSON(http.StatusBadRequest, gin.H{
			"Error": "Could not contact database",
		})
		return
	}
	defer res.Body.Close()

	// Read the response body
	body, err := io.ReadAll(res.Body)
	if err != nil {
		fmt.Printf("client: error reading response body: %s\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"Error": "Error reading response from database",
		})
		return
	}
	c.Data(http.StatusOK, "application/json", body)
}

func main() {
	router := gin.Default()

	// Route to where text and key will be entered
	router.GET("/", showInputForm)
	// Route to display the encrypted text and the key used for encryption
	router.POST("/submit", processData)

	// Add route to get all from DB
	router.GET("/getall", getAllFromDB)

	// Run the server
	router.Run(":" + thisServerPort)
}
